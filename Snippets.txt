{
	"Controllers": {
		"prefix": "gen-ControllerBase-Completo",
		"body": [
			"using API.Dtos;",
			"using API.Helpers;",
			"using AutoMapper;",
			"using Dominio.Entities;",
			"using Dominio.Interfaces;",
			"using Microsoft.AspNetCore.Mvc;",
			"",
			"namespace API.Controllers;",
			"",
				"\t[ApiVersion(\"1.0\")]",
				"\t[ApiVersion(\"1.1\")]",
				"\tpublic class ${1:Nombre}Controller : BaseApiController{",
					"",	
					"\t\tprivate readonly IUnitOfWork _UnitOfWork;",
					"\t\tprivate readonly IMapper _Mapper;",
					"",
					"\t\tpublic ${1:Nombre}Controller(IUnitOfWork unitOfWork,IMapper mapper){",
					"\t\t\t_UnitOfWork = unitOfWork;",
					"\t\t\t_Mapper = mapper;",
					"\t\t}",
					"",
					"\t\t[HttpGet]",
					"\t\t[MapToApiVersion(\"1.0\")]",
					"\t\t[ProducesResponseType(StatusCodes.Status200OK)]",
					"\t\t[ProducesResponseType(StatusCodes.Status400BadRequest)]",
					"\t\tpublic async Task<ActionResult<IEnumerable<${2:NombreDto}>>> Get(){",
					"\t\t\tvar records = await _UnitOfWork.${3:NombrePluralIUnitOfWork}!.GetAllAsync();",
					"\t\t\treturn _Mapper.Map<List<${2:NombreDto}>>(records);",
					"\t\t}",
					"",
					"\t\t[HttpGet]",
					"\t\t[MapToApiVersion(\"1.1\")]",
					"\t\t[ProducesResponseType(StatusCodes.Status200OK)]",
					"\t\t[ProducesResponseType(StatusCodes.Status400BadRequest)]",
					"\t\tpublic async Task<ActionResult<Pager<${2:NombreDto}>>> Get11([FromQuery] Params recordParams)",
					"\t\t{",
					"\t\t\tvar record = await _UnitOfWork.${3:NombrePluralIUnitOfWork}!.GetAllAsync(recordParams.PageIndex,recordParams.PageSize,recordParams.Search);",
					"\t\t\tvar lstrecordsDto = _Mapper.Map<List<${2:NombreDto}>>(record.registros);",
					"\t\t\treturn new Pager<${2:NombreDto}>(lstrecordsDto,record.totalRegistros,recordParams.PageIndex,recordParams.PageSize,recordParams.Search);",
					"\t\t}",
					"",
					"\t\t[HttpGet(\"{id}\")]",
					"\t\t[ProducesResponseType(StatusCodes.Status200OK)]",
					"\t\t[ProducesResponseType(StatusCodes.Status400BadRequest)]",
					"\t\t[ProducesResponseType(StatusCodes.Status404NotFound)]",
					"\t\tpublic async Task<ActionResult<${2:NombreDto}>> Get(string id)",
					"\t\t{",
					"\t\t\tvar record = await _UnitOfWork.${3:NombrePluralIUnitOfWork}!.GetByIdAsync(id);",
					"\t\t\tif (record == null){",
					"\t\t\t\treturn NotFound();",
					"\t\t\t}",
					"\t\t\treturn _Mapper.Map<${2:NombreDto}>(record);",
					"\t\t}",
					"",
					"\t\t[HttpPost]",
					"\t\t[ProducesResponseType(StatusCodes.Status201Created)]",
					"\t\t[ProducesResponseType(StatusCodes.Status400BadRequest)]",
					"\t\tpublic async Task<ActionResult<${4:NombreEntidad}>> Post(${2:NombreDto} recordDto){",
					"\t\t\tvar record = _Mapper.Map<${4:NombreEntidad}>(recordDto);",
					"\t\t\t_UnitOfWork.${3:NombrePluralIUnitOfWork}!.Add(record);",
					"\t\t\tawait _UnitOfWork.SaveAsync();",
					"\t\t\tif (record == null)",
					"\t\t\t{",
					"\t\t\t\treturn BadRequest();",
					"\t\t\t}",
					"\t\t\trecordDto.Id = record.Id;",
					"\t\t\treturn CreatedAtAction(nameof(Post),new {id= recordDto.Id}, recordDto);",
					"\t\t}",
					"",
					"\t\t[HttpPut(\"{id}\")]",
					"\t\t[ProducesResponseType(StatusCodes.Status200OK)]",
					"\t\t[ProducesResponseType(StatusCodes.Status404NotFound)]",
					"\t\t[ProducesResponseType(StatusCodes.Status400BadRequest)]",
					"\t\tpublic async Task<ActionResult<${2:NombreDto}>> Put(string id, [FromBody]${2:NombreDto} recordDto){",
					"\t\t\tif(recordDto == null)",
					"\t\t\t\treturn NotFound();",
					"\t\t\tvar records = _Mapper.Map<${4:NombreEntidad}>(recordDto);",
					"\t\t\t_UnitOfWork.${3:NombrePluralIUnitOfWork}!.Update(records);",
					"\t\t\tawait _UnitOfWork.SaveAsync();",
					"\t\t\treturn recordDto;",
					"\t\t}",
					"",
					"\t\t[HttpDelete(\"{id}\")]",
					"\t\t[ProducesResponseType(StatusCodes.Status204NoContent)]",
					"\t\t[ProducesResponseType(StatusCodes.Status404NotFound)]",
					"\t\tpublic async Task<IActionResult> Delete(string id){",
					"\t\t\tvar record = await _UnitOfWork.${3:NombrePluralIUnitOfWork}!.GetByIdAsync(id);",
					"\t\t\tif(record == null){",
					"\t\t\t\treturn NotFound();",
					"\t\t\t}",
					"\t\t\t_UnitOfWork.${3:NombrePluralIUnitOfWork}.Remove(record);",
					"\t\t\tawait _UnitOfWork.SaveAsync();",
					"\t\t\treturn NoContent();",
					"\t\t}",
					"",
				"\t}",
				""
		],
		"description": "Snippet para configuraci√≥n de la base de los controladores"
	}


	
}
